# os-lab


#even odd
echo "Enter a number: "
read number
if  ((number%2==0))
then
  echo "Number is even."
else
  echo "Number is odd."
fi


#factorial
echo "Enter a number: "
read num
f=1
 
for((i=1;i<=num;i++))
do
f=$((i*f))
done
 
echo "$f"




#fibonacci
echo "Enter a number: "
read n
a=0
b=1
echo $a
echo $b
for (( i=2; i<n; i++ ))
do
    c=$((a+b))
    echo "$c"
    a=$b
    b=$c
done

#fibonacci of nth number
echo "Enter a number: "
read n
if((n<=1))
then 
echo "$n"
else
a=0
b=1
for (( i=2; i<n; i++ ))
do
    c=$((a+b))
    a=$b
    b=$c
done
    echo "$c"
    fi




#switch
echo -n "Enter the name of a country: "
read COUNTRY

echo -n "The official language of $COUNTRY is "

case $COUNTRY in

  Lithuania)
    echo -n "Lithuanian"
    ;;

  Romania | Moldova)
    echo -n "Romanian"
    ;;

  Italy | "San Marino" | Switzerland | "Vatican City")
    echo -n "Italian"
    ;;

  *)
    echo -n "unknown"
    ;;
esac



#priority
#include <stdio.h>

void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int main()
{
    int n;
    printf("Enter Number of Processes: ");
    scanf("%d",&n);
    int b[n],p[n],index[n];
    for(int i=0;i<n;i++)
    {
        printf("Enter Burst Time and Priority Value for Process %d: ",i+1);
        scanf("%d %d",&b[i],&p[i]);
        index[i]=i+1;
    }
    for(int i=0;i<n;i++)
    {
        int a=p[i],m=i;
        for(int j=i;j<n;j++)
        {
            if(p[j] > a)
            {
                a=p[j];
                m=j;
            }
        }

        swap(&p[i], &p[m]);
        swap(&b[i], &b[m]);
        swap(&index[i],&index[m]);
    }
 
    int t=0;
 
    printf("Order of process Execution is\n");
    for(int i=0;i<n;i++)
    {
        printf("P%d is executed from %d to %d\n",index[i],t,t+b[i]);
        t+=b[i];
    }
    printf("\n");
    printf("Process Id     Burst Time   Wait Time    TurnAround Time\n");
    int wait_time=0;
    for(int i=0;i<n;i++)
    {
        printf("P%d          %d          %d          %d\n",index[i],b[i],wait_time,wait_time + b[i]);
        wait_time += b[i];
    }
    return 0;
}

#fifo

#include<stdio.h>
void findWaitingTime(int processes[], int n,
						int bt[], int wt[])
{
	wt[0] = 0;
	for (int i = 1; i < n ; i++ )
		wt[i] = bt[i-1] + wt[i-1] ;
}
void findTurnAroundTime( int processes[], int n,
				int bt[], int wt[], int tat[])
{
	for (int i = 0; i < n ; i++)
		tat[i] = bt[i] + wt[i];
}

void findavgTime( int processes[], int n, int bt[])
{
	int wt[n], tat[n], total_wt = 0, total_tat = 0;
	findWaitingTime(processes, n, bt, wt);
	findTurnAroundTime(processes, n, bt, wt, tat);
	printf("Processes Burst time Waiting time Turn around time\n");
	for (int i=0; i<n; i++)
	{
		total_wt = total_wt + wt[i];
		total_tat = total_tat + tat[i];
		printf(" %d ",(i+1));
		printf("	 %d ", bt[i] );
		printf("	 %d",wt[i] );
		printf("	 %d\n",tat[i] );
	}
	int s=(float)total_wt / (float)n;
	int t=(float)total_tat / (float)n;
	printf("Average waiting time = %d",s);
	printf("\n");
	printf("Average turn around time = %d ",t);
}
int main()
{
	int processes[] = { 1, 2, 3};
	int n = sizeof processes / sizeof processes[0];
	int burst_time[] = {10, 5, 8};

	findavgTime(processes, n, burst_time);
	return 0;
}



#sjf
#include <stdio.h>
int main(){
int A[100][4];
int i, j, n, total = 0, index, temp;
float avg_wt, avg_tat;
printf("Enter number of process: ");
scanf("%d", &n);
printf("Enter Burst Time:\n");
for (i = 0; i < n; i++) {
printf("P%d: ", i + 1);
scanf("%d", &A[i][1]);
A[i][0] = i + 1;
}
for (i = 0; i < n; i++) {
index = i;
for (j = i + 1; j < n; j++)
if (A[j][1] < A[index][1])
index = j;
temp = A[i][1];
A[i][1] = A[index][1];
A[index][1] = temp;
temp = A[i][0];
A[i][0] = A[index][0];
A[index][0] = temp;
}
A[0][2] = 0;
for (i = 1; i < n; i++) {
A[i][2] = 0;
for (j = 0; j < i; j++)
A[i][2] += A[j][1];
total += A[i][2];
}
avg_wt = (float)total / n;
total = 0;
printf("P BT WT TAT\n");
for (i = 0; i < n; i++) {
A[i][3] = A[i][1] + A[i][2];
total += A[i][3];
printf("P%d %d %d %d\n",
A[i][0],A[i][1], A[i][2], A[i][3]);
}
avg_tat = (float)total / n;
printf("Average Waiting Time= %f", avg_wt);
printf("\nAverage Turnaround Time= %f\n", avg_tat);}



//Round Robin
#include<stdio.h>
 
int main()
{
      int i, limit, total = 0, x, counter = 0, time_quantum;
      int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10];
      float average_wait_time, average_turnaround_time;
      printf("\nEnter Total Number of Processes:\t");
      scanf("%d", &limit);
      x = limit;
      for(i = 0; i < limit; i++)
      {
            printf("\nEnter Details of Process[%d]\n", i + 1);
 
            printf("Arrival Time:\t");
 
            scanf("%d", &arrival_time[i]);
 
            printf("Burst Time:\t");
 
            scanf("%d", &burst_time[i]);
 
            temp[i] = burst_time[i];
      }
 
      printf("\nEnter Time Quantum:\t");
      scanf("%d", &time_quantum);
      printf("\nProcess ID\t\tBurst Time\t Turnaround Time\t Waiting Time\n");
      for(total = 0, i = 0; x != 0;)
      {
            if(temp[i] <= time_quantum && temp[i] > 0)
            {
                  total = total + temp[i];
                  temp[i] = 0;
                  counter = 1;
            }
            else if(temp[i] > 0)
            {
                  temp[i] = temp[i] - time_quantum;
                  total = total + time_quantum;
            }
            if(temp[i] == 0 && counter == 1)
            {
                  x--;
                  printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
                  wait_time = wait_time + total - arrival_time[i] - burst_time[i];
                  turnaround_time = turnaround_time + total - arrival_time[i];
                  counter = 0;
            }
            if(i == limit - 1)
            {
                  i = 0;
            }
            else if(arrival_time[i + 1] <= total)
            {
                  i++;
            }
            else
            {
                  i = 0;
            }
      }
 
      average_wait_time = wait_time * 1.0 / limit;
      average_turnaround_time = turnaround_time * 1.0 / limit;
      printf("\n\nAverage Waiting Time:\t%f", average_wait_time);
      printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time);
      return 0;
}


//Daemon
#include <stdio.h> #include <stdlib.h>
#include <unistd.h> #include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
int main(){
FILE *fp= NULL;
pid_t process_id = 0;
pid_t sid = 0;
process_id = fork();
if (process_id < 0){
printf("fork failed!\n");
exit(1);
}
if (process_id > 0){
printf("process_id of child process %d \n", process_id);
exit(0);
}
umask(0);
sid = setsid();
if(sid < 0){
exit(1);
}
chdir("/");
close(STDIN_FILENO);
close(STDOUT_FILENO);
close(STDERR_FILENO);
fp = fopen ("Log.txt", "w+");
while (1){
sleep(1);
fprintf(fp, "Logging info...\n");
fflush(fp);
}
fclose(fp);
return (0);
}


//Fork
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
int main(){
pid_t q= fork();
if(q<0){
printf("Error");
}else if(q==0){
printf("The PID of the child in q=0 is : %d\n",getpid());
printf("The PID of the parent in q=0 is : %d\n",getppid());
}else if(q>0){
printf("The PID of the child in q>0 is : %d\n",getpid());
printf("The PID of the parent in q>0 is : %d\n",q);
}

// exec
#include<stdio.h>
#include<unistd.h>
int main(){
printf("Linux is awesome/n");
return 0;
}

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
int main(){
char *args[]=("./exec,NULL");
execvp(args[0],args);
printf("Windows is awesome);
return 0;
}

//wait 

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
int main(){
pid_t cid;
cid=fork();
if(fork==0) exit(0);
else cid=wait(NULL);
printf("pid=%d\n",getpid());

printf("cid=%d\n",cid);
return 0;
}

//Zombie Process
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
int main(){
pid_t child_pid = fork();
if (child_pid > 0)
sleep(50);
else
exit(0);
return 0;
}


//Orphan
#include<stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main(){
pid_t pid = fork();
if (pid > 0)
printf("in parent process\n");
else if (pid == 0){
sleep(5);
printf("in child process\n");
}
printf("pid=%d\n",getpid());

printf("cid=%d\n",pid);
return 0;}




//Catch a Signal
#include<stdio.h>
#include<signal.h>
#include<unistd.h>
void sig_handler(int signo){
if (signo == SIGINT)
printf("received SIGINT\n");
}
int main(void){
if (signal(SIGINT, sig_handler) == SIG_ERR)
printf("\ncan't catch SIGINT\n");
while(1)
sleep(1);
return 0;
}


//SIGKILL,SIGSTOP and other
#include<stdio.h>
#include<signal.h>
#include<unistd.h>
void sig_handler(int signo){
if (signo == SIGUSR1)
printf("received SIGUSR1\n");
else if (signo == SIGKILL)
printf("received SIGKILL\n");
else if (signo == SIGSTOP)
printf("received SIGSTOP\n");
}
int main(void){
if (signal(SIGUSR1, sig_handler) == SIG_ERR)
printf("\ncan't catch SIGUSR1\n");
if (signal(SIGKILL, sig_handler) == SIG_ERR)
printf("\ncan't catch SIGKILL\n");
if (signal(SIGSTOP, sig_handler) == SIG_ERR)
printf("\ncan't catch SIGSTOP\n");
while(1)
sleep(1);
return 0;}

